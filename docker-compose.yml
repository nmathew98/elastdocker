services:
  elasticsearch:
    image: elastdocker/elasticsearch:${ELK_VERSION}
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: ${ELK_VERSION}
    restart: unless-stopped
    environment:
      network.publish_host: _eth0_
      node.name: elasticsearch.{{.Task.Slot}}
      path.data: ./elasticsearch.{{.Task.Slot}}
      discovery.seed_hosts: tasks.elasticsearch
      cluster.initial_master_nodes: elasticsearch.1,elasticsearch.2,elasticsearch.3
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT}
      ES_JAVA_OPTS: "-Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP} -Des.enforce.bootstrap.checks=true -Dlog4j2.formatMsgNoLookups=true"
      bootstrap.memory_lock: "true"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data:Z
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - ./elasticsearch/config/log4j2.properties:/usr/share/elasticsearch/config/log4j2.properties:ro,Z
    secrets:
      - source: elasticsearch.keystore
        target: /usr/share/elasticsearch/config/elasticsearch.keystore
      - source: elasticsearch.service_tokens
        target: /usr/share/elasticsearch/config/service_tokens
      - source: elasticsearch.certificate
        target: /usr/share/elasticsearch/config/certs/fullchain.pem
      - source: elasticsearch.key
        target: /usr/share/elasticsearch/config/certs/privkey.pem
    ports:
      - target: 9300
        published: 9300
      - target: ${ELASTICSEARCH_PORT}
        published: ${ELASTICSEARCH_PORT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 200000
        hard: 200000
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "curl -sf --insecure https://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@localhost:$ELASTICSEARCH_PORT/_cat/health | grep -ioE 'green|yellow' || echo 'not green/yellow cluster status'"
        ]
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 3

  logstash:
    image: elastdocker/logstash:${ELK_VERSION}
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    restart: unless-stopped
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_HOST_PORT: https://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
      LS_JAVA_OPTS: "-Xmx${LOGSTASH_HEAP} -Xms${LOGSTASH_HEAP} -Dlog4j2.formatMsgNoLookups=true"
    ports:
      - target: 5044
        published: 5044
      - target: 9600
        published: 9600
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-s",
          "-XGET",
          "http://127.0.0.1:9600"
        ]
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1

  kibana:
    image: elastdocker/kibana:${ELK_VERSION}
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    restart: unless-stopped
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_HOST_PORT: https://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
      KIBANA_PORT: ${KIBANA_PORT}
      KIBANA_PUBLIC_BASE_URL: ${KIBANA_PUBLIC_BASE_URL}
    env_file:
      - ./secrets/.env.kibana.token
    secrets:
      - source: kibana.certificate
        target: /certs/fullchain.pem
      - source: kibana.key
        target: /certs/privkey.pem
    ports:
      - target: ${KIBANA_PORT}
        published: 443
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1

  apm-server:
    image: elastdocker/apm-server:${ELK_VERSION}
    build:
      context: apm-server/
      args:
        ELK_VERSION: $ELK_VERSION
    restart: unless-stopped
    ports:
      - target: 8200
        published: 8200
    volumes:
      - ./apm-server/config/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_HOST_PORT: https://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
      ELASTIC_APM_SECRET_TOKEN: ${ELASTIC_APM_SECRET_TOKEN}
    secrets:
      - source: apm-server.certificate
        target: /certs/apm-fullchain.pem
      - source: apm-server.key
        target: /certs/apm-privkey.pem
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1

volumes:
  elasticsearch:


secrets:
  elasticsearch.keystore:
    file: ./secrets/keystore/elasticsearch.keystore
  elasticsearch.service_tokens:
    file: ./secrets/service_tokens
  elasticsearch.certificate:
    file: /etc/letsencrypt/live/${LETS_ENCRYPT_DOMAIN}/fullchain.pem
  elasticsearch.key:
    file: /etc/letsencrypt/live/${LETS_ENCRYPT_DOMAIN}/privkey.pem
  kibana.certificate:
    file: /etc/letsencrypt/live/${LETS_ENCRYPT_DOMAIN}/fullchain.pem
  kibana.key:
    file: /etc/letsencrypt/live/${LETS_ENCRYPT_DOMAIN}/privkey.pem
  apm-server.certificate:
    file: /etc/letsencrypt/live/${LETS_ENCRYPT_DOMAIN}/fullchain.pem
  apm-server.key:
    file: /etc/letsencrypt/live/${LETS_ENCRYPT_DOMAIN}/privkey.pem

networks:
  elk:
    name: elk
    driver: overlay
    attachable: true
